events {
    worker_connections 1024;
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Basic settings
    sendfile        on;
    keepalive_timeout  65;
    client_max_body_size 100M;

    # WebSocket upgrade handling
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }



    # Shared memory zone for tracking runner_access state
    lua_shared_dict runner_access_cache 1m;

    server {
        listen 20000;
        server_name _;
        
        # Security headers
        add_header X-Content-Type-Options nosniff always;
        
        # Static assets with optimal caching
        location /static/ {
            alias /usr/local/openresty/nginx/html/static/;
            expires 7d;
            add_header Cache-Control "public, immutable";
            access_log off;
            try_files $uri =404;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # Help/documentation page
        location = /help {
            try_files /port_help.html =404;
        }
        
        # Error pages for runner connection issues
        location = /error/invalid-credentials {
            add_header Content-Type "text/html; charset=utf-8";
            try_files /invalid_credentials.html =404;
        }
        
        location = /error/connection-exists {
            add_header Content-Type "text/html; charset=utf-8";
            try_files /connection_exists.html =404;
        }
        
        # Legacy browser endpoint (redirect to help)
        location = /browser/ {
            return 301 /help;
        }
        
        # Main port proxy logic
        location ~ ^/(?<input_port>[0-9]+)(?<request_path>/.*)?$ {
            set $target_port '';
            set $proxy_path '';
            
            # Input validation and preprocessing
            access_by_lua_block {
                local port = tonumber(ngx.var.input_port)
                local path = ngx.var.request_path or "/"
                
                -- Validate port range (same as original logic)
                if not port or port <= 1026 or port >= 20000 then
                    ngx.log(ngx.ERR, "Invalid port: " .. (port or "nil"))
                    ngx.status = 400
                    ngx.say("Invalid port mapping: " .. ngx.var.input_port .. " -> " .. (port or "unknown"))
                    return ngx.exit(400)
                end
                
                -- Clean duplicate port from path if present (same as original logic)
                local port_pattern = "^/" .. port .. "(/.*)"
                local clean_path = string.match(path, port_pattern)
                
                ngx.var.target_port = port
                ngx.var.proxy_path = clean_path or path
                
                ngx.log(ngx.INFO, "Proxying to port " .. port .. " with path " .. (clean_path or path))
            }
            
            # Proxy configuration with error handling
            proxy_pass http://127.0.0.1:$target_port$proxy_path$is_args$args;
            
            # Standard proxy headers
            include /usr/local/openresty/nginx/conf/proxy_headers.conf;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 = @service_unavailable;
        }
        
        # Service unavailable handler
        location @service_unavailable {
            internal;
            content_by_lua_block {
                local template_path = "/usr/local/openresty/nginx/html/port_error.html"
                local file = io.open(template_path, "r")
                
                if not file then
                    ngx.log(ngx.ERR, "Could not open error template: " .. template_path)
                    ngx.status = 500
                    ngx.say("Internal server error")
                    return
                end
                
                local content = file:read("*all")
                file:close()
                
                -- Template substitution
                content = string.gsub(content, "{{TARGET_PORT}}", ngx.var.target_port or "unknown")
                
                ngx.header.content_type = "text/html; charset=utf-8"
                ngx.say(content)
            }
        }
        
        # Default fallback with runner-access handling
        location / {
            access_by_lua_block {
                local cache = ngx.shared.runner_access_cache
                local incoming_runner_access = ngx.var.http_runner_access
                
                ngx.log(ngx.ERR, "=== RUNNER-ACCESS DEBUG START ===")
                ngx.log(ngx.ERR, "Incoming runner-access header: " .. (incoming_runner_access or "nil"))
                
                -- Check if we've already generated a token before
                local has_been_set = cache:get("runner_access_set")
                ngx.log(ngx.ERR, "Cache runner_access_set value: " .. tostring(has_been_set))
                
                if has_been_set then
                    -- This is a subsequent request - validate the token
                    if incoming_runner_access then
                        local stored_token = cache:get("runner_access_token")
                        ngx.log(ngx.ERR, "Stored token: " .. (stored_token or "nil"))
                        ngx.log(ngx.ERR, "Incoming token: " .. incoming_runner_access)
                        
                        if stored_token and stored_token == incoming_runner_access then
                            ngx.log(ngx.ERR, "Token matches, proceeding normally")
                            ngx.log(ngx.ERR, "=== RUNNER-ACCESS DEBUG END (valid token) ===")
                            return
                        else
                            ngx.log(ngx.ERR, "Token mismatch, showing invalid credentials error")
                            ngx.log(ngx.ERR, "=== RUNNER-ACCESS DEBUG END (invalid token) ===")
                            ngx.status = 403
                            ngx.exec("/error/invalid-credentials")
                            return
                        end
                    else
                        ngx.log(ngx.ERR, "No token provided for subsequent request, showing connection exists error")
                        ngx.log(ngx.ERR, "=== RUNNER-ACCESS DEBUG END (403) ===")
                        ngx.status = 403
                        ngx.exec("/error/connection-exists")
                        return
                    end
                end
                
                -- This is the first request - ALWAYS generate a new token (ignore any incoming token)
                ngx.log(ngx.ERR, "First time access, generating new runner-access token...")
                
                -- Generate a random token (simple hash using current time + random)
                math.randomseed(ngx.time() + ngx.worker.pid())
                local token = string.format("%x%x%x%x", 
                    math.random(0, 0xFFFF),
                    math.random(0, 0xFFFF), 
                    math.random(0, 0xFFFF),
                    math.random(0, 0xFFFF))
                
                ngx.log(ngx.ERR, "Generated token: " .. token)
                
                -- Store both the flag and the token
                local success1, err1 = cache:set("runner_access_set", true, 0)
                local success2, err2 = cache:set("runner_access_token", token, 0)
                
                if not success1 or not success2 then
                    ngx.log(ngx.ERR, "Failed to set cache - flag: " .. (err1 or "ok") .. ", token: " .. (err2 or "ok"))
                    ngx.status = 500
                    ngx.say("Internal server error")
                    return ngx.exit(500)
                else
                    ngx.log(ngx.ERR, "Cache set successfully - future requests will require this token")
                end
                
                -- Set the generated token as response header (using hyphen)
                ngx.header["runner-access"] = token
                ngx.log(ngx.ERR, "Response header runner-access set to: " .. token)
                
                ngx.log(ngx.ERR, "=== RUNNER-ACCESS DEBUG END (first access) ===")
            }
            
            proxy_pass http://127.0.0.1:3000/;
            include /usr/local/openresty/nginx/conf/proxy_headers.conf;
        }
    }
}
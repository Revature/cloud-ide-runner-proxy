events {
    worker_connections 1024;
    multi_accept on;
}
http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;
    client_max_body_size 100M;

    server {
        listen 20000;
        
        # Match any request with a port number in the path
    location ~ ^/(?<input_port>[0-9]+)(?<path>/.*)?$ {
        # Calculate target port (input_port - 10000)
        set $target_port '';
        
        rewrite_by_lua_block {
            local input_port = tonumber(ngx.var.input_port)
            local target_port = input_port - 10000
            
            -- Ensure target port is valid
            if target_port > 0 and target_port < 65536 then
                ngx.var.target_port = target_port
            else
                ngx.status = 400
                ngx.say("Invalid port mapping: " .. input_port .. " -> " .. target_port)
                return ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
        }
        
        # Set default path if none
        if ($path = "") {
            set $path "/";
        }
        
        # Proxy to the calculated port
        proxy_pass http://127.0.0.1:$target_port$path$is_args$args;
        
        # Proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Properly handle paths
        proxy_redirect off;
        
        # Ensure proper content type detection
        proxy_set_header Accept-Encoding "";
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Fix base href and asset paths dynamically
        sub_filter '<base href="/"' '<base href="/$input_port/"';
        sub_filter 'src="/' 'src="/$input_port/';
        sub_filter 'href="/' 'href="/$input_port/';
        
        # These handle urls with port 20000 dynamically
        sub_filter 'http://$host:20000/' '/$input_port/';
        sub_filter 'https://$host:20000/' '/$input_port/';
        sub_filter '//$host:20000/' '/$input_port/';
        
        # For any IP or domain with port 20000
        sub_filter ':20000/' '/$input_port/';
        
        sub_filter_types text/html application/javascript text/css;
        sub_filter_once off;
        
        # Handle errors
        proxy_intercept_errors on;
        error_page 502 = @proxy_down;
        
        # Don't buffer
        proxy_buffering off;
        
        # Timeout settings
        proxy_connect_timeout 10s;
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
    }
        
        # Error page when target port is not running
        location @proxy_down {
            add_header Content-Type text/html;
            return 200 '<!DOCTYPE html>
            <html>
            <head>
                <title>Service Not Available</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        line-height: 1.6;
                        color: #333;
                        max-width: 650px;
                        margin: 40px auto;
                        padding: 20px;
                        text-align: center;
                        background-color: #f5f5f5;
                        border-radius: 8px;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    }
                    h1 {
                        color: #e74c3c;
                        margin-bottom: 20px;
                    }
                    .message {
                        margin-bottom: 30px;
                        font-size: 18px;
                    }
                    .port {
                        font-weight: bold;
                        color: #3498db;
                    }
                </style>
            </head>
            <body>
                <h1>Service Not Available</h1>
                <div class="message">
                    The service on port <span class="port">$target_port</span> is not currently running.
                </div>
                <p>Please ensure the service is running on port <span class="port">$target_port</span> and try again.</p>
            </body>
            </html>';
        }

        # Default page explaining the proxy usage
        location / {
            add_header Content-Type text/html;
            return 200 '<!DOCTYPE html>
            <html>
            <head>
                <title>Port Proxy Service</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        line-height: 1.6;
                        color: #333;
                        max-width: 700px;
                        margin: 40px auto;
                        padding: 20px;
                        background-color: #f8f9fa;
                    }
                    h1 {
                        color: #2c3e50;
                        border-bottom: 2px solid #3498db;
                        padding-bottom: 10px;
                    }
                    .container {
                        background-color: white;
                        padding: 20px;
                        border-radius: 5px;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                    .example {
                        background-color: #f1f8ff;
                        border-left: 4px solid #3498db;
                        padding: 10px 15px;
                        margin: 15px 0;
                        font-family: monospace;
                    }
                    code {
                        background-color: #f1f1f1;
                        padding: 2px 5px;
                        border-radius: 3px;
                        font-family: monospace;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Port Proxy Service</h1>
                    <p>This service proxies requests to localhost ports by subtracting 10,000 from the port number in the URL path.</p>
                    
                    <h2>How to use:</h2>
                    <p>Access <code>http://this-server/[port+10000]/path</code> to proxy to <code>http://localhost:[port]/path</code></p>
                    
                    <h3>Examples:</h3>
                    <div class="example">
                        <p><strong>Accessing port 3000:</strong></p>
                        <p>URL: <code>http://this-server/13000/</code> → Proxies to <code>http://localhost:3000/</code></p>
                    </div>
                    
                    <div class="example">
                        <p><strong>Accessing port 8080 with path:</strong></p>
                        <p>URL: <code>http://this-server/18080/api/v1/users</code> → Proxies to <code>http://localhost:8080/api/v1/users</code></p>
                    </div>
                </div>
            </body>
            </html>';
        }
    }
}